{"version":3,"sources":["../../src/controller/service.js"],"names":["config","db","api","post","req","res","newService","Service","name","body","price","address","latitude","email_address","phone","service_description","image_uri","available_time","save","err","send","json","message","get","find","services","findById","params","id","service","put","delete","remove","_id","newReview","Review","title","text","rattings","reviews","push"],"mappings":"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","file":"service.js","sourcesContent":["import mongoose  from \"mongoose\";\nimport { Router } from \"express\";\nimport bodyPaser from \"body-parser\";\nimport User from \"../model/user\";\nimport {authenticate}  from '../middleware/authMiddleware';\n\n\n\nexport default ({config, db}) => {\n    let api = Router();\n\n  \n\n    //add v1 routers\n    api.post('/add', (req,res) => {\n       let newService = new Service();\n       newService.name = req.body.name;\n       newService.price =  req.body.price;\n       newService.address  = req.body.address;\n       newService.latitude  = req.body.latitude;\n       newService.email_address  = req.body.email_address;\n       newService.phone  = req.body.phone;\n       newService.service_description  = req.body.service_description;\n       newService.image_uri  = req.body.image_uri;\n       newService.available_time  = req.body.available_time;\n       newService.save(err => {\n          if (err){\n            res.send(err);\n          }\n          res.json({message: 'service successfully saved'});\n       });\n    });\n\n\n//get all services\n    api.get('/', (req,res) => {\n        Service.find({}, (err, services) => {\n          if (err){\n            res.send(err);\n          }\n          res.json(services);\n        });\n\n      });\n\n\n      //read one service\n  api.get('/:id', (req,res) => {\n    Service.findById(req.params.id, (err, service) => {\n      if (err){\n        res.send(err);\n      }\n      res.json(service);\n    });\n\n  });\n\n\n// update service\n  api.put('/:id', (req,res) => {\n  Service.findById(req.params.id, (err, service) => {\n    if (err){\n      res.send(err);\n    }\n    service.name = req.body.name;\n    service.price =  req.body.price;\n    service.address  = req.body.address;\n    service.latitude  = req.body.latitude;\n    service.email_address  = req.body.email_address;\n    service.phone  = req.body.phone;\n    service.service_description  = req.body.service_description;\n    service.image_uri  = req.body.image_uri;\n    service.available_time  = req.body.available_time;\n    service.save(err => {\n        if (err){\n          res.send(err);\n        }\n        res.json({message: ' service successfully updated'});\n     });\n  });\n\n});\n\n\n//delete\napi.delete('/:id', (req,res) => {\n  Service.remove({\n     _id: req.params.id\n  },(err, service) => {\n      if (err){\n        res.send(err);\n      }\n    res.json({message: 'service successfully deleted'});\n  });\n});\n\n//add review for a specific service id\n\napi.post('/reviews/add/:id', (req,res) => {\n  Service.findById(req.params.id, (err, service) => {\n      if (err){\n        res.send(err);\n      }\n      let newReview = new Review();\n      newReview.title  = req.body.title;\n      newReview.text = req.body.text;\n      newReview.service  = service._id;\n      newReview.rattings =  req.body.rattings;\n      newReview.save(err => {\n          if (err){\n            res.send(err);\n          }\n          service.reviews.push(newReview);\n          service.save(err => {\n              if (err){\n                res.send(err);\n              }\n              res.json({message: 'service review saved'});\n          });\n      });\n});\n\n});\n\n\n//get  reviews by service id\n  api.get('/reviews/:id',  (req, res) => {\n     Review.find({service:  req.params.id}, (err, reviews) => {\n       if (err){\n         res.send(err);\n       }\n       res.json(reviews);\n     });\n  });\n\n\n\n    return api;\n}\n"]}