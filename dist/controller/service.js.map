{"version":3,"sources":["../../src/controller/service.js"],"names":["config","db","api","post","req","res","newService","name","body","price","address","latitude","email_address","phone","service_description","image_uri","available_time","save","err","send","json","message","get","find","services","findById","params","id","service","put","delete","remove","_id","newReview","title","text","rattings","reviews","push"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;kBAIe,gBAAkB;AAAA,MAAhBA,MAAgB,QAAhBA,MAAgB;AAAA,MAARC,EAAQ,QAARA,EAAQ;;AAC7B,MAAIC,MAAM,sBAAV;;AAGA;AACAA,MAAIC,IAAJ,CAAS,MAAT,gCAA8B,UAACC,GAAD,EAAKC,GAAL,EAAa;AACxC,QAAIC,aAAa,uBAAjB;AACAA,eAAWC,IAAX,GAAkBH,IAAII,IAAJ,CAASD,IAA3B;AACAD,eAAWG,KAAX,GAAoBL,IAAII,IAAJ,CAASC,KAA7B;AACAH,eAAWI,OAAX,GAAsBN,IAAII,IAAJ,CAASE,OAA/B;AACAJ,eAAWK,QAAX,GAAuBP,IAAII,IAAJ,CAASG,QAAhC;AACAL,eAAWM,aAAX,GAA4BR,IAAII,IAAJ,CAASI,aAArC;AACAN,eAAWO,KAAX,GAAoBT,IAAII,IAAJ,CAASK,KAA7B;AACAP,eAAWQ,mBAAX,GAAkCV,IAAII,IAAJ,CAASM,mBAA3C;AACAR,eAAWS,SAAX,GAAwBX,IAAII,IAAJ,CAASO,SAAjC;AACAT,eAAWU,cAAX,GAA6BZ,IAAII,IAAJ,CAASQ,cAAtC;AACAV,eAAWW,IAAX,CAAgB,eAAO;AACpB,UAAIC,GAAJ,EAAQ;AACNb,YAAIc,IAAJ,CAASD,GAAT;AACD;AACDb,UAAIe,IAAJ,CAAS,EAACC,SAAS,4BAAV,EAAT;AACF,KALD;AAMF,GAjBD;;AAoBJ;AACInB,MAAIoB,GAAJ,CAAQ,GAAR,EAAa,UAAClB,GAAD,EAAKC,GAAL,EAAa;AACtB,sBAAQkB,IAAR,CAAa,EAAb,EAAiB,UAACL,GAAD,EAAMM,QAAN,EAAmB;AAClC,UAAIN,GAAJ,EAAQ;AACNb,YAAIc,IAAJ,CAASD,GAAT;AACD;AACDb,UAAIe,IAAJ,CAASI,QAAT;AACD,KALD;AAOD,GARH;;AAWE;AACJtB,MAAIoB,GAAJ,CAAQ,MAAR,EAAgB,UAAClB,GAAD,EAAKC,GAAL,EAAa;AAC3B,sBAAQoB,QAAR,CAAiBrB,IAAIsB,MAAJ,CAAWC,EAA5B,EAAgC,UAACT,GAAD,EAAMU,OAAN,EAAkB;AAChD,UAAIV,GAAJ,EAAQ;AACNb,YAAIc,IAAJ,CAASD,GAAT;AACD;AACDb,UAAIe,IAAJ,CAASQ,OAAT;AACD,KALD;AAOD,GARD;;AAWF;AACE1B,MAAI2B,GAAJ,CAAQ,MAAR,EAAgB,UAACzB,GAAD,EAAKC,GAAL,EAAa;AAC7B,sBAAQoB,QAAR,CAAiBrB,IAAIsB,MAAJ,CAAWC,EAA5B,EAAgC,UAACT,GAAD,EAAMU,OAAN,EAAkB;AAChD,UAAIV,GAAJ,EAAQ;AACNb,YAAIc,IAAJ,CAASD,GAAT;AACD;AACDU,cAAQrB,IAAR,GAAeH,IAAII,IAAJ,CAASD,IAAxB;AACAqB,cAAQnB,KAAR,GAAiBL,IAAII,IAAJ,CAASC,KAA1B;AACAmB,cAAQlB,OAAR,GAAmBN,IAAII,IAAJ,CAASE,OAA5B;AACAkB,cAAQjB,QAAR,GAAoBP,IAAII,IAAJ,CAASG,QAA7B;AACAiB,cAAQhB,aAAR,GAAyBR,IAAII,IAAJ,CAASI,aAAlC;AACAgB,cAAQf,KAAR,GAAiBT,IAAII,IAAJ,CAASK,KAA1B;AACAe,cAAQd,mBAAR,GAA+BV,IAAII,IAAJ,CAASM,mBAAxC;AACAc,cAAQb,SAAR,GAAqBX,IAAII,IAAJ,CAASO,SAA9B;AACAa,cAAQZ,cAAR,GAA0BZ,IAAII,IAAJ,CAASQ,cAAnC;AACAY,cAAQX,IAAR,CAAa,eAAO;AAChB,YAAIC,GAAJ,EAAQ;AACNb,cAAIc,IAAJ,CAASD,GAAT;AACD;AACDb,YAAIe,IAAJ,CAAS,EAACC,SAAS,+BAAV,EAAT;AACF,OALF;AAMD,KAnBD;AAqBD,GAtBC;;AAyBF;AACAnB,MAAI4B,MAAJ,CAAW,MAAX,EAAmB,UAAC1B,GAAD,EAAKC,GAAL,EAAa;AAC9B,sBAAQ0B,MAAR,CAAe;AACZC,WAAK5B,IAAIsB,MAAJ,CAAWC;AADJ,KAAf,EAEE,UAACT,GAAD,EAAMU,OAAN,EAAkB;AAChB,UAAIV,GAAJ,EAAQ;AACNb,YAAIc,IAAJ,CAASD,GAAT;AACD;AACHb,UAAIe,IAAJ,CAAS,EAACC,SAAS,8BAAV,EAAT;AACD,KAPD;AAQD,GATD;;AAWA;;AAEAnB,MAAIC,IAAJ,CAAS,kBAAT,EAA6B,UAACC,GAAD,EAAKC,GAAL,EAAa;AACxC,sBAAQoB,QAAR,CAAiBrB,IAAIsB,MAAJ,CAAWC,EAA5B,EAAgC,UAACT,GAAD,EAAMU,OAAN,EAAkB;AAC9C,UAAIV,GAAJ,EAAQ;AACNb,YAAIc,IAAJ,CAASD,GAAT;AACD;AACD,UAAIe,YAAY,sBAAhB;AACAA,gBAAUC,KAAV,GAAmB9B,IAAII,IAAJ,CAAS0B,KAA5B;AACAD,gBAAUE,IAAV,GAAiB/B,IAAII,IAAJ,CAAS2B,IAA1B;AACAF,gBAAUL,OAAV,GAAqBA,QAAQI,GAA7B;AACAC,gBAAUG,QAAV,GAAsBhC,IAAII,IAAJ,CAAS4B,QAA/B;AACAH,gBAAUhB,IAAV,CAAe,eAAO;AAClB,YAAIC,GAAJ,EAAQ;AACNb,cAAIc,IAAJ,CAASD,GAAT;AACD;AACDU,gBAAQS,OAAR,CAAgBC,IAAhB,CAAqBL,SAArB;AACAL,gBAAQX,IAAR,CAAa,eAAO;AAChB,cAAIC,GAAJ,EAAQ;AACNb,gBAAIc,IAAJ,CAASD,GAAT;AACD;AACDb,cAAIe,IAAJ,CAAS,EAACC,SAAS,sBAAV,EAAT;AACH,SALD;AAMH,OAXD;AAYL,KArBC;AAuBD,GAxBD;;AA2BA;AACEnB,MAAIoB,GAAJ,CAAQ,cAAR,EAAyB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AACpC,qBAAOkB,IAAP,CAAY,EAACK,SAAUxB,IAAIsB,MAAJ,CAAWC,EAAtB,EAAZ,EAAuC,UAACT,GAAD,EAAMmB,OAAN,EAAkB;AACvD,UAAInB,GAAJ,EAAQ;AACNb,YAAIc,IAAJ,CAASD,GAAT;AACD;AACDb,UAAIe,IAAJ,CAASiB,OAAT;AACD,KALD;AAMF,GAPD;;AAWE,SAAOnC,GAAP;AACH,C","file":"service.js","sourcesContent":["import mongoose  from \"mongoose\";\nimport { Router } from \"express\";\nimport Service from \"../model/service\"\nimport bodyPaser from \"body-parser\";\nimport Review  from \"../model/review\";\n\nimport {authenticate}  from '../middleware/authMiddleware';\n\n\n\nexport default ({config, db}) => {\n    let api = Router();\n\n\n    //add v1 routers\n    api.post('/add',authenticate, (req,res) => {\n       let newService = new Service();\n       newService.name = req.body.name;\n       newService.price =  req.body.price;\n       newService.address  = req.body.address;\n       newService.latitude  = req.body.latitude;\n       newService.email_address  = req.body.email_address;\n       newService.phone  = req.body.phone;\n       newService.service_description  = req.body.service_description;\n       newService.image_uri  = req.body.image_uri;\n       newService.available_time  = req.body.available_time;\n       newService.save(err => {\n          if (err){\n            res.send(err);\n          }\n          res.json({message: 'service successfully saved'});\n       });\n    });\n\n\n//get all services\n    api.get('/', (req,res) => {\n        Service.find({}, (err, services) => {\n          if (err){\n            res.send(err);\n          }\n          res.json(services);\n        });\n\n      });\n\n\n      //read one service\n  api.get('/:id', (req,res) => {\n    Service.findById(req.params.id, (err, service) => {\n      if (err){\n        res.send(err);\n      }\n      res.json(service);\n    });\n\n  });\n\n\n// update service\n  api.put('/:id', (req,res) => {\n  Service.findById(req.params.id, (err, service) => {\n    if (err){\n      res.send(err);\n    }\n    service.name = req.body.name;\n    service.price =  req.body.price;\n    service.address  = req.body.address;\n    service.latitude  = req.body.latitude;\n    service.email_address  = req.body.email_address;\n    service.phone  = req.body.phone;\n    service.service_description  = req.body.service_description;\n    service.image_uri  = req.body.image_uri;\n    service.available_time  = req.body.available_time;\n    service.save(err => {\n        if (err){\n          res.send(err);\n        }\n        res.json({message: ' service successfully updated'});\n     });\n  });\n\n});\n\n\n//delete\napi.delete('/:id', (req,res) => {\n  Service.remove({\n     _id: req.params.id\n  },(err, service) => {\n      if (err){\n        res.send(err);\n      }\n    res.json({message: 'service successfully deleted'});\n  });\n});\n\n//add review for a specific service id\n\napi.post('/reviews/add/:id', (req,res) => {\n  Service.findById(req.params.id, (err, service) => {\n      if (err){\n        res.send(err);\n      }\n      let newReview = new Review();\n      newReview.title  = req.body.title;\n      newReview.text = req.body.text;\n      newReview.service  = service._id;\n      newReview.rattings =  req.body.rattings;\n      newReview.save(err => {\n          if (err){\n            res.send(err);\n          }\n          service.reviews.push(newReview);\n          service.save(err => {\n              if (err){\n                res.send(err);\n              }\n              res.json({message: 'service review saved'});\n          });\n      });\n});\n\n});\n\n\n//get  reviews by service id\n  api.get('/reviews/:id',  (req, res) => {\n     Review.find({service:  req.params.id}, (err, reviews) => {\n       if (err){\n         res.send(err);\n       }\n       res.json(reviews);\n     });\n  });\n\n\n\n    return api;\n}\n"]}